
==================== FINAL INTERFACE ====================
2016-08-31 19:23:15.696531 UTC

interface main@main:Main 7103
  interface hash: 0ce4d13de02e2092969906595c25a07a
  ABI hash: bf04ebf2c9d1612825d4e8db43012b8e
  export-list hash: b8a2639d156d4e7e3cb6a513cac95b16
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b47277d43009f8fab017447fd4a4b97
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.argOp
  Main.main
module dependencies: RegexPattern Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.String c2d7fed27a27fee276c179af07290091
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.Environment ba6e36000c8274703cf7786fbe8d0f6c
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  RegexPattern ab2a32030812e47af8f679be8ea1093e
  exports: bd688786c051b5c8677cb66ab2858f41
  patternToItem ecfd9b1438235b992c443bcc3d5b6add
  regexPattern dc0b073c4d644b9e00cda69e70960732
import  -/  Types 878e8b7ddc0fd354e3b8da7a94accdb2
  exports: f2e4d8a6118fd275c02a53a2302cb929
import  -/  regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix fa14a969e0d89af615bc3ee63c912f06
import  -/  regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Wrap c14dca50bea9909bd11f2fae9cef1d46
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
60042f8d6ffcff93d45e452f2d0d439c
  argOp :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ xs :: [GHC.Base.String] ->
                 case Main.argOp_go xs (GHC.Types.[] @ GHC.Types.Char) of wild {
                   [] -> GHC.List.init2 @ GHC.Types.Char
                   : x xs1 -> GHC.List.init1 @ GHC.Types.Char x xs1 }) -}
cb9a7f2db9df0af7aab64b40d385c377
  argOp_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a249d9a0b6f23772291616ef6166e5d6
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
4e73f1bb9c702a9a8a3359c5cbf8f8d5
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case Text.Regex.Posix.String.$fRegexContextRegex[][]_$cmatchOnceText
                        Main.main6
                        (Main.argOp ipv1) of wild {
                   GHC.Base.Nothing -> Main.main4 ipv
                   GHC.Base.Just ds2
                   -> case ds2 of wild1 { (,,) ds3 ma ds4 ->
                      case ma of wild2 { GHC.Arr.Array l u dt ds5 ->
                      case l of wild4 { GHC.Types.I# m ->
                      case u of wild5 { GHC.Types.I# n ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# m 0) of wild6 {
                        GHC.Types.False
                        -> case GHC.Arr.indexError
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Show.$fShowInt
                                  (wild4, wild5)
                                  Main.main3
                                  Main.main2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 0 n) of wild7 {
                             GHC.Types.False
                             -> case GHC.Arr.indexError
                                       @ GHC.Types.Int
                                       @ GHC.Types.Int
                                       GHC.Show.$fShowInt
                                       (wild4, wild5)
                                       Main.main3
                                       Main.main2
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.indexArray#
                                       @ (GHC.Base.String,
                                          (Text.Regex.Base.RegexLike.MatchOffset,
                                           Text.Regex.Base.RegexLike.MatchLength))
                                       ds5
                                       (GHC.Prim.-# 0 m) of ds6 { (##) ipv2 ->
                                case ipv2 of wild8 { (,) x ds7 ->
                                case x of wild9 {
                                  [] -> Main.main4 ipv
                                  : ipv3 ipv4
                                  -> GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       (case RegexPattern.$wpatternToItem
                                               wild9 of ww { (#,,#) ww1 ww2 ww3 ->
                                        Types.$w$cshowsPrec
                                          0
                                          ww1
                                          ww2
                                          ww3
                                          (GHC.Types.[] @ GHC.Types.Char) })
                                       GHC.Types.True
                                       ipv } } } } } } } } } } }) -}
7d299a91a669e4beffed76d7011104ed
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int"#) -}
59632552c8a0ed1f6453e3507886e3da
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0) -}
5be353b5065de6722eb48cdf9a5e0502
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main5
                   GHC.Types.True
                   eta) -}
2ae8317dcf9b7df5937a56ed6e64d52c
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Failed to match input pattern"#) -}
2bfce76b4570fac7d13592739d66c372
  main6 :: Text.Regex.Posix.Wrap.Regex
  {- Unfolding: (Text.Regex.Posix.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Text.Regex.Posix.Wrap.$fRegexOptionsRegexCompOptionExecOption1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.NTCo:CInt[0]))
                        (Sym (Text.Regex.Posix.Wrap.NTCo:CompOption[0])))
                   Text.Regex.Posix.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.NTCo:CInt[0]))
                        (Sym (Text.Regex.Posix.Wrap.NTCo:ExecOption[0])))
                   RegexPattern.regexPattern) -}
92f321874441d05053538a98947d4d07
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

